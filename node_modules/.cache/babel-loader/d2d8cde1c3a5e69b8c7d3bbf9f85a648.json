{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/objectWithoutPropertiesLoose\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/assertThisInitialized\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/extends\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _events = _interopRequireDefault(require(\"dom-helpers/events\"));\n\nvar _ownerDocument = _interopRequireDefault(require(\"dom-helpers/ownerDocument\"));\n\nvar _inDOM = _interopRequireDefault(require(\"dom-helpers/util/inDOM\"));\n\nvar _scrollbarSize = _interopRequireDefault(require(\"dom-helpers/util/scrollbarSize\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _Modal = _interopRequireDefault(require(\"react-overlays/lib/Modal\"));\n\nvar _isOverflowing = _interopRequireDefault(require(\"react-overlays/lib/utils/isOverflowing\"));\n\nvar _elementType = _interopRequireDefault(require(\"prop-types-extra/lib/elementType\"));\n\nvar _Fade = _interopRequireDefault(require(\"./Fade\"));\n\nvar _ModalBody = _interopRequireDefault(require(\"./ModalBody\"));\n\nvar _ModalDialog = _interopRequireDefault(require(\"./ModalDialog\"));\n\nvar _ModalFooter = _interopRequireDefault(require(\"./ModalFooter\"));\n\nvar _ModalHeader = _interopRequireDefault(require(\"./ModalHeader\"));\n\nvar _ModalTitle = _interopRequireDefault(require(\"./ModalTitle\"));\n\nvar _bootstrapUtils = require(\"./utils/bootstrapUtils\");\n\nvar _createChainedFunction = _interopRequireDefault(require(\"./utils/createChainedFunction\"));\n\nvar _splitComponentProps2 = _interopRequireDefault(require(\"./utils/splitComponentProps\"));\n\nvar _StyleConfig = require(\"./utils/StyleConfig\");\n\nvar propTypes = (0, _extends2.default)({}, _Modal.default.propTypes, _ModalDialog.default.propTypes, {\n  /**\n   * Include a backdrop component. Specify 'static' for a backdrop that doesn't\n   * trigger an \"onHide\" when clicked.\n   */\n  backdrop: _propTypes.default.oneOf(['static', true, false]),\n\n  /**\n   * Add an optional extra class name to .modal-backdrop\n   * It could end up looking like class=\"modal-backdrop foo-modal-backdrop in\".\n   */\n  backdropClassName: _propTypes.default.string,\n\n  /**\n   * Close the modal when escape key is pressed\n   */\n  keyboard: _propTypes.default.bool,\n\n  /**\n   * Open and close the Modal with a slide and fade animation.\n   */\n  animation: _propTypes.default.bool,\n\n  /**\n   * A Component type that provides the modal content Markup. This is a useful\n   * prop when you want to use your own styles and markup to create a custom\n   * modal component.\n   */\n  dialogComponentClass: _elementType.default,\n\n  /**\n   * When `true` The modal will automatically shift focus to itself when it\n   * opens, and replace it to the last focused element when it closes.\n   * Generally this should never be set to false as it makes the Modal less\n   * accessible to assistive technologies, like screen-readers.\n   */\n  autoFocus: _propTypes.default.bool,\n\n  /**\n   * When `true` The modal will prevent focus from leaving the Modal while\n   * open. Consider leaving the default value here, as it is necessary to make\n   * the Modal work well with assistive technologies, such as screen readers.\n   */\n  enforceFocus: _propTypes.default.bool,\n\n  /**\n   * When `true` The modal will restore focus to previously focused element once\n   * modal is hidden\n   */\n  restoreFocus: _propTypes.default.bool,\n\n  /**\n   * When `true` The modal will show itself.\n   */\n  show: _propTypes.default.bool,\n\n  /**\n   * A callback fired when the header closeButton or non-static backdrop is\n   * clicked. Required if either are specified.\n   */\n  onHide: _propTypes.default.func,\n\n  /**\n   * Callback fired before the Modal transitions in\n   */\n  onEnter: _propTypes.default.func,\n\n  /**\n   * Callback fired as the Modal begins to transition in\n   */\n  onEntering: _propTypes.default.func,\n\n  /**\n   * Callback fired after the Modal finishes transitioning in\n   */\n  onEntered: _propTypes.default.func,\n\n  /**\n   * Callback fired right before the Modal transitions out\n   */\n  onExit: _propTypes.default.func,\n\n  /**\n   * Callback fired as the Modal begins to transition out\n   */\n  onExiting: _propTypes.default.func,\n\n  /**\n   * Callback fired after the Modal finishes transitioning out\n   */\n  onExited: _propTypes.default.func,\n\n  /**\n   * @private\n   */\n  container: _Modal.default.propTypes.container\n});\nvar defaultProps = (0, _extends2.default)({}, _Modal.default.defaultProps, {\n  animation: true,\n  dialogComponentClass: _ModalDialog.default\n});\nvar childContextTypes = {\n  $bs_modal: _propTypes.default.shape({\n    onHide: _propTypes.default.func\n  })\n};\n/* eslint-disable no-use-before-define, react/no-multi-comp */\n\nfunction DialogTransition(props) {\n  return _react.default.createElement(_Fade.default, (0, _extends2.default)({}, props, {\n    timeout: Modal.TRANSITION_DURATION\n  }));\n}\n\nfunction BackdropTransition(props) {\n  return _react.default.createElement(_Fade.default, (0, _extends2.default)({}, props, {\n    timeout: Modal.BACKDROP_TRANSITION_DURATION\n  }));\n}\n/* eslint-enable no-use-before-define */\n\n\nvar Modal = /*#__PURE__*/function (_React$Component) {\n  (0, _inheritsLoose2.default)(Modal, _React$Component);\n\n  function Modal(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    _this.handleEntering = _this.handleEntering.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.handleExited = _this.handleExited.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.handleWindowResize = _this.handleWindowResize.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.handleDialogClick = _this.handleDialogClick.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.setModalRef = _this.setModalRef.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    _this.state = {\n      style: {}\n    };\n    return _this;\n  }\n\n  var _proto = Modal.prototype;\n\n  _proto.getChildContext = function getChildContext() {\n    return {\n      $bs_modal: {\n        onHide: this.props.onHide\n      }\n    };\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    // Clean up the listener if we need to.\n    this.handleExited();\n  };\n\n  _proto.setModalRef = function setModalRef(ref) {\n    this._modal = ref;\n  };\n\n  _proto.handleDialogClick = function handleDialogClick(e) {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n\n    this.props.onHide();\n  };\n\n  _proto.handleEntering = function handleEntering() {\n    // FIXME: This should work even when animation is disabled.\n    _events.default.on(window, 'resize', this.handleWindowResize);\n\n    this.updateStyle();\n  };\n\n  _proto.handleExited = function handleExited() {\n    // FIXME: This should work even when animation is disabled.\n    _events.default.off(window, 'resize', this.handleWindowResize);\n  };\n\n  _proto.handleWindowResize = function handleWindowResize() {\n    this.updateStyle();\n  };\n\n  _proto.updateStyle = function updateStyle() {\n    if (!_inDOM.default) {\n      return;\n    }\n\n    var dialogNode = this._modal.getDialogElement();\n\n    var dialogHeight = dialogNode.scrollHeight;\n    var document = (0, _ownerDocument.default)(dialogNode);\n    var bodyIsOverflowing = (0, _isOverflowing.default)(_reactDom.default.findDOMNode(this.props.container || document.body));\n    var modalIsOverflowing = dialogHeight > document.documentElement.clientHeight;\n    this.setState({\n      style: {\n        paddingRight: bodyIsOverflowing && !modalIsOverflowing ? (0, _scrollbarSize.default)() : undefined,\n        paddingLeft: !bodyIsOverflowing && modalIsOverflowing ? (0, _scrollbarSize.default)() : undefined\n      }\n    });\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        backdrop = _this$props.backdrop,\n        backdropClassName = _this$props.backdropClassName,\n        animation = _this$props.animation,\n        show = _this$props.show,\n        Dialog = _this$props.dialogComponentClass,\n        className = _this$props.className,\n        style = _this$props.style,\n        children = _this$props.children,\n        onEntering = _this$props.onEntering,\n        onExited = _this$props.onExited,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"backdrop\", \"backdropClassName\", \"animation\", \"show\", \"dialogComponentClass\", \"className\", \"style\", \"children\", \"onEntering\", \"onExited\"]);\n\n    var _splitComponentProps = (0, _splitComponentProps2.default)(props, _Modal.default),\n        baseModalProps = _splitComponentProps[0],\n        dialogProps = _splitComponentProps[1];\n\n    var inClassName = show && !animation && 'in';\n    return _react.default.createElement(_Modal.default, (0, _extends2.default)({}, baseModalProps, {\n      ref: this.setModalRef,\n      show: show,\n      containerClassName: (0, _bootstrapUtils.prefix)(props, 'open'),\n      transition: animation ? DialogTransition : undefined,\n      backdrop: backdrop,\n      backdropTransition: animation ? BackdropTransition : undefined,\n      backdropClassName: (0, _classnames.default)((0, _bootstrapUtils.prefix)(props, 'backdrop'), backdropClassName, inClassName),\n      onEntering: (0, _createChainedFunction.default)(onEntering, this.handleEntering),\n      onExited: (0, _createChainedFunction.default)(onExited, this.handleExited)\n    }), _react.default.createElement(Dialog, (0, _extends2.default)({}, dialogProps, {\n      style: (0, _extends2.default)({}, this.state.style, style),\n      className: (0, _classnames.default)(className, inClassName),\n      onClick: backdrop === true ? this.handleDialogClick : null\n    }), children));\n  };\n\n  return Modal;\n}(_react.default.Component);\n\nModal.propTypes = propTypes;\nModal.defaultProps = defaultProps;\nModal.childContextTypes = childContextTypes;\nModal.Body = _ModalBody.default;\nModal.Header = _ModalHeader.default;\nModal.Title = _ModalTitle.default;\nModal.Footer = _ModalFooter.default;\nModal.Dialog = _ModalDialog.default;\nModal.TRANSITION_DURATION = 300;\nModal.BACKDROP_TRANSITION_DURATION = 150;\n\nvar _default = (0, _bootstrapUtils.bsClass)('modal', (0, _bootstrapUtils.bsSizes)([_StyleConfig.Size.LARGE, _StyleConfig.Size.SMALL], Modal));\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}