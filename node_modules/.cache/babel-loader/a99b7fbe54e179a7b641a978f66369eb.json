{"ast":null,"code":"import { getAllTask, createTask, deleteTask } from 'api';\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport { tokenName } from 'api/const';\nimport TYPE from 'actions';\n\nfunction* getTaskFlow() {\n  try {\n    const token = localStorage.getItem(tokenName);\n    const response = yield call(getAllTask, token);\n    yield put({\n      type: TYPE.GET_TASK_SUCCESS,\n      data: response.data,\n      code: response.status,\n      error: null\n    });\n  } catch (_ref) {\n    let response = _ref.response;\n\n    if (response) {\n      yield put({\n        type: TYPE.GET_TASK_FAIL,\n        error: response.data.detail,\n        code: response.status\n      });\n    } else {\n      yield put({\n        type: TYPE.GET_TASK_FAIL,\n        error: \"Cannot connect to server\"\n      });\n    }\n  }\n}\n\nfunction* createTaskFlow(action) {\n  try {\n    const token = localStorage.getItem(tokenName);\n    yield call(createTask, token, action.task);\n    yield put({\n      type: TYPE.GET_TASK_REQUESTING\n    });\n  } catch (_ref2) {\n    let response = _ref2.response;\n\n    if (response) {\n      yield put({\n        type: TYPE.CREATE_TASK_FAIL,\n        error: \"An error occurred\",\n        code: response.status\n      });\n    } else {\n      yield put({\n        type: TYPE.CREATE_TASK_FAIL,\n        error: \"Cannot connect to server\"\n      });\n    }\n  }\n}\n\nfunction* delTaskFlow(action) {\n  try {\n    const token = localStorage.getItem(tokenName);\n    yield call(deleteTask, token, action.taskID);\n    yield put({\n      type: TYPE.GET_TASK_REQUESTING\n    });\n  } catch (_ref3) {\n    let response = _ref3.response;\n\n    if (response) {\n      yield put({\n        type: TYPE.DELETE_TASK_FAIL,\n        error: \"An error occurred\",\n        code: response.status\n      });\n    } else {\n      yield put({\n        type: TYPE.DELETE_TASK_FAIL,\n        error: \"Cannot connect to server\"\n      });\n    }\n  }\n}\n\nfunction* TaskWatcher() {\n  yield takeEvery(TYPE.GET_TASK_REQUESTING, getTaskFlow);\n  yield takeEvery(TYPE.CREATE_TASK_REQUESTING, createTaskFlow);\n  yield takeEvery(TYPE.DELETE_TASK_REQUESTING, delTaskFlow);\n}\n\nexport default TaskWatcher;","map":{"version":3,"names":["getAllTask","createTask","deleteTask","takeEvery","call","put","tokenName","TYPE","getTaskFlow","token","localStorage","getItem","response","type","GET_TASK_SUCCESS","data","code","status","error","GET_TASK_FAIL","detail","createTaskFlow","action","task","GET_TASK_REQUESTING","CREATE_TASK_FAIL","delTaskFlow","taskID","DELETE_TASK_FAIL","TaskWatcher","CREATE_TASK_REQUESTING","DELETE_TASK_REQUESTING"],"sources":["C:/web/ci-tools/frontend/src/sagas/taskManage.js"],"sourcesContent":["import { getAllTask, createTask, deleteTask } from 'api'\r\nimport { takeEvery, call, put } from 'redux-saga/effects'\r\nimport { tokenName } from 'api/const'\r\nimport TYPE from 'actions'\r\n\r\nfunction* getTaskFlow() {\r\n  try { \r\n    const token = localStorage.getItem(tokenName)\r\n    const response = yield call(getAllTask, token)\r\n    yield put({type: TYPE.GET_TASK_SUCCESS, data: response.data,  code: response.status, error: null})\r\n  }\r\n  catch ({ response }) {\r\n    if (response) {\r\n      yield put({type: TYPE.GET_TASK_FAIL, error: response.data.detail, code: response.status})\r\n    } else {\r\n      yield put({type: TYPE.GET_TASK_FAIL, error: \"Cannot connect to server\"})\r\n    }\r\n  }\r\n}\r\n\r\nfunction* createTaskFlow(action) {\r\n  try {\r\n    const token = localStorage.getItem(tokenName)\r\n    yield call(createTask, token, action.task)\r\n    yield put({type: TYPE.GET_TASK_REQUESTING})\r\n  }\r\n  catch ({ response }) {\r\n    if (response) {\r\n      yield put({type: TYPE.CREATE_TASK_FAIL, error: \"An error occurred\", code: response.status})\r\n    } else {\r\n      yield put({type: TYPE.CREATE_TASK_FAIL, error: \"Cannot connect to server\"})\r\n    }\r\n  }\r\n}\r\n\r\nfunction* delTaskFlow(action) {\r\n  try {\r\n    const token = localStorage.getItem(tokenName)\r\n    yield call(deleteTask, token, action.taskID)\r\n    yield put({ type: TYPE.GET_TASK_REQUESTING})\r\n  }\r\n  catch ({ response }) {\r\n    if (response) {\r\n      yield put({type: TYPE.DELETE_TASK_FAIL, error: \"An error occurred\", code: response.status})\r\n    } else {\r\n      yield put({type: TYPE.DELETE_TASK_FAIL, error: \"Cannot connect to server\"})\r\n    }\r\n  }\r\n}\r\n  \r\nfunction* TaskWatcher() {\r\n  yield takeEvery(TYPE.GET_TASK_REQUESTING, getTaskFlow)\r\n  yield takeEvery(TYPE.CREATE_TASK_REQUESTING, createTaskFlow)\r\n  yield takeEvery(TYPE.DELETE_TASK_REQUESTING, delTaskFlow)\r\n}\r\n\r\nexport default TaskWatcher"],"mappings":"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"},"metadata":{},"sourceType":"module"}